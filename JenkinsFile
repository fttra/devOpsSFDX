@Library('Jenkinstools@main') _
node {
    def sfdxHome = tool 'sfdx'
    def devHubName = "${params.Environment}"
    def sandboxName = env.SANDBOX_NAME

    //credential folder
    def resource = libraryResource resource: 'readFile-config.yml'
    println(resource)
    def config = readYaml text: resource



    //username
    def SF_USERNAME
    //SF org URL
    def SFDC_HOST
    //consumer key
    def CLIENT_ID
    //credentials
    def KEY_FILE

           

withEnv(["HOME=${env.WORKSPACE}"]){
        stage('Authentication to Salesforce') {
            	authenticateToSalesforce(sfdxHome, config, devHubName)
	}

	stage('Update file'){	
    checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [[$class: 'CleanBeforeCheckout']], userRemoteConfigs: [[url: 'https://github.com/fttra/devOpsSFDX.git']]])
		def con = bat returnStdout: true, script: "\"${sfdxHome}/sfdx\" force:data:bulk:upsert -s Account -f import/Account.csv -i Id -u ${SF_USERNAME}"
		
		println con
    }
	 stage('Logout'){
	 	def logoutStatus = bat returnStatus: true, script: "\"${sfdxHome}/sfdx\" force:auth:logout"

	 	println logoutStatus
	    }
}
}
def authenticateToSalesforce(sfdxHome, config, org){
try{
    withCredentials([
        file(credentialsId: config.credentials[org].connapp_consumerkey_id, variable: 'CLIENT_ID'),
        file(credentialsId: config.credentials[org].cred_id,  variable: 'KEY_FILE'),
        file(credentialsId: config.credentials[org].username,  variable: 'SF_USERNAME')
    ]) {
        
        def rc = bat returnStatus: true, script: "\"${sfdxHome}/sfdx\" force:auth:jwt:grant  -i ${CLIENT_ID} -u ${SF_USERNAME} -f ${KEY_FILE}  --setdefaultusername"
        if (rc != 0) { error 'hub org authorization failed' }

        println rc
    }
} catch (Exception e){
    println ("Message " + e)
}
}