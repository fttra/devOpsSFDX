node {
    def sfdxHome = tool 'sfdx'

    //newVariables
    //username
    def HUB_ORG
    //SF org URL
    def SFDC_HOST
    //consumer key
    def CONNECTED_APP_CONSUMER_KEY
    //credentials
    def JWT_KEY_CRED_ID



    stage ('Credentials based on env'){
        if ("${params.Environment}" == "Env1"){
            //env1 credentials:

            //username
            HUB_ORG=env.env1_HUB_ORG_DH
            //SF org URL
            SFDC_HOST = env.env1_SFDC_HOST_DH
            //consumer key
            CONNECTED_APP_CONSUMER_KEY=env.env1_CONNECTED_APP_CONSUMER_KEY_DH
            //credentials
            JWT_KEY_CRED_ID = env.env1_JWT_CRED_ID_DH

        } else if ("${params.Environment}" == "Env2"){
        error ("Error")
        } else ("${params.Environment}" == "Env3"){
            error ("error 2")
        }
    }
           


    stage ('Print login info'){
    println HUB_ORG_DH
    println SFDC_HOST
    println CONNECTED_APP_CONSUMER_KEY
    println JWT_KEY_CRED_ID
    }

withEnv(["HOME=${env.WORKSPACE}"]){
    withCredentials([file(credentialsId: JWT_KEY_CRED_ID, variable: 'jwt_key_file')]) {
        stage('Authorization') {
            	def rc = bat returnStatus: true, script: "\"${sfdxHome}/sfdx\" force:auth:jwt:grant  -u ${HUB_ORG} -f ${jwt_key_file} -i ${CONNECTED_APP_CONSUMER_KEY} --setdefaultusername"
            	if (rc != 0) { error 'hub org authorization failed' }

		println rc
	}

	stage('Update file'){	
    checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [[$class: 'CleanBeforeCheckout']], userRemoteConfigs: [[url: 'https://github.com/fttra/devOpsSFDX.git']]])
		def con = bat returnStdout: true, script: "\"${sfdxHome}/sfdx\" force:data:bulk:upsert -s Account -f import/Account.csv -i Id -u ${HUB_ORG}"
		
		println con
    }
	 stage('Logout'){
	 	def logoutStatus = bat returnStatus: true, script: "\"${sfdxHome}/sfdx\" force:auth:logout"

	 	println logoutStatus
	    }
}
}
}