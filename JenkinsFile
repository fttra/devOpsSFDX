node {
    def sfdxHome = tool 'sfdx'
    def filesToUpload

    //credential folder
    def config = readYaml file: 'yaml/readFile-config.yml'

    def importDir = config.core_properties.bitbucket_parameters.import_directory
    def objPossibleToUp = config.core_properties.bitbucket_parameters.objects_possible_to_upload.split(',').collect{it as String}
    def listOfThings = [config.core_properties.bitbucket_parameters.status_check_accepted_retrieve]

    print listOfThings
    
    for (def i in listOfThings){
        println (i)
    }

    if ("Closed" in listOfThings){
        print ("TO dziala")
    } else {
        error ("Nie dziaÅ‚a")
    }

    println importDir
    println objPossibleToUp.toString()   

withEnv(["HOME=${env.WORKSPACE}"]){
    stage ('Validate environment'){
        validateEnvironment(config, "${params.Environment}")
    }

    stage ('Validate file to upload'){
        checkoutSourceRepository()
        filesToUpload = validateFile(objPossibleToUp, importDir, "${params.Environment}", "${params.Object}")
    }

	stage('Update file'){
        logoutFromSalesforce(sfdxHome)
        authenticateToSalesforce(sfdxHome, config, "${params.Environment}")
        updateFiles(sfdxHome, "${params.Object}", filesToUpload)        
    }
	 stage('Logout'){
	 	logoutFromSalesforce(sfdxHome)
	    }
}
}

def checkoutSourceRepository(){
   
checkout([  
            $class:   'GitSCM', 
            branches:   [[name: '*/main']], 
            extensions: [], 
            userRemoteConfigs: [[url: 'https://github.com/fttra/devOpsSFDX.git']]
            ])
}

def authenticateToSalesforce(sfdxHome, config, org){
    withCredentials([
        string(credentialsId: config.credentials[org].connapp_consumerkey_id, variable: 'CLIENT_ID'),
        file(credentialsId: config.credentials[org].cred_id,  variable: 'KEY_FILE'),
    ]) {
        
        def rc = bat returnStatus: true, script: "\"${sfdxHome}/sfdx\" force:auth:jwt:grant  -i ${CLIENT_ID} -u ${config.credentials[org].username} -f ${KEY_FILE}  --setdefaultusername"
        if (rc != 0) { 
            println rc
            error 'Authorization failed' 
            }
    } 
}

def validateEnvironment (config, org){
    if(config.credentials[org] == null){
        error ("There is no environment with the name: " + org)
    }
    print config.credentials[org]
}

def logoutFromSalesforce(sfdxHome){
    def logoutStatus = bat returnStatus: true, script: "\"${sfdxHome}/sfdx\" force:auth:logout -a -p --json > logout.json"

    if (logoutStatus!=0){
        jsonOut = readJSON file: 'logout.json'
        if (jsonOut.name != 'noOrgsFound'){
            error(jsonOut.message)
        } else {
            println("No orgs to be logout from")
        }
    }

	println "Successfully logout from Salesforce"
}

def validateFile (objPossibleToUp, importDir, org, objectType){
    dir(importDir) {
    def files = findFiles glob: '**/*.csv'
    def filesToUpload = [:]

        if (files.size()>0){
            for (f in files){
                if (!filesToUpload.containsKey(f)){
                    def nameSplited = f.toString().split('_', 2).collect{it as String}
                    for (obj in objPossibleToUp){
                        if (nameSplited[0].toLowerCase().equals(org.toLowerCase()) && nameSplited[1].toLowerCase().contains(obj.toLowerCase())){
                            if (objectType.toLowerCase().contains('all')){
                                filesToUpload.put(f,obj)
                            } else if (nameSplited[1].toLowerCase().contains(objectType.toLowerCase())){
                                filesToUpload.put(f,obj)
                            }
                        }
                    }
                } else {
                    error ("File: " + f + " is not valid as there are two object names in the name of the file")
                }
            }
        } else {
            error ("There are no .csv files in the chosen directory")
        }

        if (filesToUpload.size()==1){
            println ("Found a file to upload. File name:\n" + filesToUpload.keySet() + "\nProceeding ...")
            return filesToUpload
        } else if (filesToUpload.size()>1){
            println ("Found files to upload. List of files that were found:\n" + filesToUpload.keySet() + "\nProceeding ...")
            return filesToUpload
        } else {
            error ("There is no file with the specified Environment and/or Object Type names.\nList of the files in the target directory:\n" + filesToUpload.toString())
        }
    }
}

def updateFiles (sfdxHome, objectType, filesToUpload) {
    println ("Perapring to upload files.\nList of the files to upload:\n" + filesToUpload.keySet() + "\nProceeding ...")

    filesToUpload.each { entry ->    
        println ("Preparing to upload file: " + entry.key)

    	def updateStatus = bat (script: "\"${sfdxHome}/sfdx\" force:data:bulk:upsert -s ${entry.value} -f import/${entry.key} -i Id -w 1 --json > update.json", returnStatus: true)
        println updateStatus

        statusCheck(updateStatus, sfdxHome)        
        }
}

def statusCheck (status,sfdxHome) {
    if (status==0){
        jsonUp = readJSON file: 'update.json' 
        def jobIdStatus = jsonFile.result.jobId.toString().replace("]", "").replace("[", "")
        println jsonUp
        
        def res = bat (returnStdout: true, script: "\"${sfdxHome}/sfdx\" force:data:bulk:status -i '${usJobId}'")
        println res
    } else {
        error (jsonUp.message)
    }
}