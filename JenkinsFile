@Library('Jenkinstools@main') _
node {
    def sfdxHome = tool 'sfdx'
    def devHubName = "${params.Environment}"
    def sandboxName = env.SANDBOX_NAME
    def objectType = "${params.Object}"
    def importDir = 'import'
    def fileToUpload

    //credential folder
    def resource = libraryResource resource: 'readFile-config.yml'
    println(resource)
    def config = readYaml text: resource
    


withEnv(["HOME=${env.WORKSPACE}"]){
    stage ('Validate environment'){
        validateEnvironment(config, devHubName)
    }

    stage ('Validate file to upload'){
        checkoutSourceRepository()
        fileToUpload = validateFile(devHubName, objectType, importDir)
    }

    stage('Authentication to Salesforce') {
        authenticateToSalesforce(sfdxHome, config, devHubName)
	}

	stage('Update file'){
        logoutFromSalesforce(sfdxHome)
        authenticateToSalesforce(sfdxHome, config, devHubName)
        updateFiles(sfdxHome, objectType, fileToUpload)
    }
	 stage('Logout'){
	 	logoutFromSalesforce(sfdxHome)
	    }
}
}

def checkoutSourceRepository(){
   
checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/fttra/devOpsSFDX.git']]])
}

def authenticateToSalesforce(sfdxHome, config, org){
    withCredentials([
        string(credentialsId: config.credentials[org].connapp_consumerkey_id, variable: 'CLIENT_ID'),
        file(credentialsId: config.credentials[org].cred_id,  variable: 'KEY_FILE'),
    ]) {
        
        def rc = bat returnStatus: true, script: "\"${sfdxHome}/sfdx\" force:auth:jwt:grant  -i ${CLIENT_ID} -u ${config.credentials[org].username} -f ${KEY_FILE}  --setdefaultusername"
        if (rc != 0) { error 'Authorization failed' }

        println rc
    } 
}

def validateEnvironment (config, org){
    if(config.credentials[org] == null){
        error ("There is no environment with the name: " + org)
    }
    print config.credentials[org]
}

def logoutFromSalesforce(sfdxHome){
    def logoutStatus = bat returnStatus: true, script: "\"${sfdxHome}/sfdx\" force:auth:logout -a -p --json > logout.json"

    if (logoutStatus!=0){
        jsonOut = readJSON file: 'logout.json'
        if (jsonOut.name != 'noOrgsFound'){
            error(jsonOut.message)
        } else {
            println("No orgs to be logout from")
        }
    }

	println "Successfully logout from Salesforce"
}

def validateFile (org, objectType, importDir){
    dir(importDir) {
    def files = findFiles glob: '**/*.csv'
    def listOfFiles = []
    if (files.size()>0){
    for (f in files){
        def nameSplited = f.toString().split('_').collect{it as String}
        
        if (nameSplited[0].toLowerCase().equals(org.toLowerCase()) && nameSplited[1].toLowerCase().contains(objectType.toLowerCase())){
            listOfFiles.add(f.toString())
        }
        }
    if (listOfFiles.size()==1){
       println "Found a file to upload. File name:\n" + listOfFiles.toString() + "\nProceeding ..."
       return listOfFiles[0]
    } else if (listOfFiles.size()>1){
         error ("There are too many files with the specified Envrionment and Object Type names.\nList of files that were found:\n" + listOfFiles.toString())
    } else {
        error ("There is no file with the specified Environment and/or Object Type names.\nList of the files in the target directory:\n" + listOfFiles.toString())
    }
    }
    else {
        error ("There is no .csv file.")
    }
    }
}

def updateFiles (sfdxHome, objectType, fileToUpload) {
        println ("Preparing to upload file: ${fileToUpload}")
    	def con = bat returnStdout: true, script: "\"${sfdxHome}/sfdx\" force:data:bulk:upsert -s ${objectType} -f import/${fileToUpload} -i Id"
		println con
}