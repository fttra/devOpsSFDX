@Library('Jenkinstools@main') _
node {
    def sfdxHome = tool 'sfdx'
    def devHubName = "${params.Environment}"
    def sandboxName = env.SANDBOX_NAME

    //credential folder
    def resource = libraryResource resource: 'readFile-config.yml'
    println(resource)
    def config = readYaml text: resource



withEnv(["HOME=${env.WORKSPACE}"]){
    stage ('Validate environment'){
        validateEnvironment(config, devHubName)
    }

    stage('Authentication to Salesforce') {
        authenticateToSalesforce(sfdxHome, config, devHubName)
	}

	stage('Update file'){	
    checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [[$class: 'CleanBeforeCheckout']], userRemoteConfigs: [[url: 'https://github.com/fttra/devOpsSFDX.git']]])
		def con = bat returnStdout: true, script: "\"${sfdxHome}/sfdx\" force:data:bulk:upsert -s Account -f import/Account.csv -i Id -u ${config.credentials[org].username}"
		
		println con
    }
	 stage('Logout'){
	 	def logoutStatus = bat returnStatus: true, script: "\"${sfdxHome}/sfdx\" force:auth:logout"

	 	println logoutStatus
	    }
}
}

def authenticateToSalesforce(sfdxHome, config, org){
    withCredentials([
        string(credentialsId: config.credentials[org].connapp_consumerkey_id, variable: 'CLIENT_ID'),
        file(credentialsId: config.credentials[org].cred_id,  variable: 'KEY_FILE'),
    ]) {
        
        def rc = bat returnStatus: true, script: "\"${sfdxHome}/sfdx\" force:auth:jwt:grant  -i ${CLIENT_ID} -u ${config.credentials[org].username} -f ${KEY_FILE}  --setdefaultusername"
        if (rc != 0) { error 'hub org authorization failed' }

        println rc
    } 
}

def validateEnvironment (config, org){

    if (!config.containsKey(org)){
        error ("Nope")
    }
}
