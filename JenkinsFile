@Library('Jenkinstools@main') _
node {
    def sfdxHome = tool 'sfdx'
    def devHubName = "${params.Environment}"
    def sandboxName = env.SANDBOX_NAME
    def objectType = "${params.Object}"

    //credential folder
    def resource = libraryResource resource: 'readFile-config.yml'
    println(resource)
    def config = readYaml text: resource
    


withEnv(["HOME=${env.WORKSPACE}"]){
    stage ('Validate environment'){
        validateEnvironment(config, devHubName)
    }

    stage ('Validate file to upload'){
        checkoutSourceRepository()
        validateFile(devHubName, objectType)
    }

    stage('Authentication to Salesforce') {
        authenticateToSalesforce(sfdxHome, config, devHubName)
	}

	stage('Update file'){
        logoutFromSalesforce(sfdxHome)
        authenticateToSalesforce(sfdxHome, config, devHubName)
        updateFiles(sfdxHome, config, devHubName, objectType)
    }
	 stage('Logout'){
	 	logoutFromSalesforce(sfdxHome)
	    }
}
}

def checkoutSourceRepository(){
   
checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/fttra/devOpsSFDX.git']]])
}

def authenticateToSalesforce(sfdxHome, config, org){
    withCredentials([
        string(credentialsId: config.credentials[org].connapp_consumerkey_id, variable: 'CLIENT_ID'),
        file(credentialsId: config.credentials[org].cred_id,  variable: 'KEY_FILE'),
    ]) {
        
        def rc = bat returnStatus: true, script: "\"${sfdxHome}/sfdx\" force:auth:jwt:grant  -i ${CLIENT_ID} -u ${config.credentials[org].username} -f ${KEY_FILE}  --setdefaultusername"
        if (rc != 0) { error 'Authorization failed' }

        println rc
    } 
}

def validateEnvironment (config, org){
    if(config.credentials[org] == null){
        error ("There is no environment with the name: " + org)
    }
    print config.credentials[org]
}

def logoutFromSalesforce(sfdxHome){
    def logoutStatus = bat returnStatus: true, script: "\"${sfdxHome}/sfdx\" force:auth:logout -a -p --json > logout.json"

    if (logoutStatus!=0){
        jsonOut = readJSON file: 'logout.json'
        if (jsonOut.name != 'noOrgsFound'){
            error(jsonOut.message)
        } else {
            println("No orgs to be logout from")
        }
    }

	println "Successfully logout from Salesforce"
}

def validateFile (org, objectType){

dir('import') {
    def files = findFiles glob: '**/*.csv'
    println files[0].toString()
    println files[1].toString()
}
}

def updateFiles (sfdxHome, config, org, objectType) {
    	def con = bat returnStdout: true, script: "\"${sfdxHome}/sfdx\" force:data:bulk:upsert -s ${objectType} -f import/${objectType}.csv -i Id -u ${config.credentials[org].username}"
		println con
}