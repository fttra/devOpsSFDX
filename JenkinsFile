@Library('Jenkinstools@main') _
node {
    def sfdxHome = tool 'sfdx'
    def devHubName = "${params.Environment}"
    def sandboxName = env.SANDBOX_NAME
    def objectType = "${params.Object}"
    def importDir = 'import'
    def filesToUpload
    def objPossibleToUp = ["Account", "User"] as String[]

    //credential folder
    def resource = libraryResource resource: 'readFile-config.yml'
    println(resource)
    def config = readYaml text: resource
    


withEnv(["HOME=${env.WORKSPACE}"]){
    stage ('Validate environment'){
        validateEnvironment(config, devHubName)
    }

    stage ('Validate file to upload'){
        checkoutSourceRepository()
        filesToUpload = validateFile(objPossibleToUp, importDir, devHubName, objectType)
    }

    stage('Authentication to Salesforce') {
        authenticateToSalesforce(sfdxHome, config, devHubName)
	}

	stage('Update file'){
        logoutFromSalesforce(sfdxHome)
        authenticateToSalesforce(sfdxHome, config, devHubName)
        updateFiles(sfdxHome, objectType, filesToUpload)        
    }
	 stage('Logout'){
	 	logoutFromSalesforce(sfdxHome)
	    }
}
}

def checkoutSourceRepository(){
   
checkout([  
            $class:   'GitSCM', 
            branches:   [[name: '*/main']], 
            extensions: [], 
            userRemoteConfigs: [[url: 'https://github.com/fttra/devOpsSFDX.git']]
            ])
}

def authenticateToSalesforce(sfdxHome, config, org){
    withCredentials([
        string(credentialsId: config.credentials[org].connapp_consumerkey_id, variable: 'CLIENT_ID'),
        file(credentialsId: config.credentials[org].cred_id,  variable: 'KEY_FILE'),
    ]) {
        
        def rc = bat returnStatus: true, script: "\"${sfdxHome}/sfdx\" force:auth:jwt:grant  -i ${CLIENT_ID} -u ${config.credentials[org].username} -f ${KEY_FILE}  --setdefaultusername"
        if (rc != 0) { error 'Authorization failed' }

        println rc
    } 
}

def validateEnvironment (config, org){
    if(config.credentials[org] == null){
        error ("There is no environment with the name: " + org)
    }
    print config.credentials[org]
}

def logoutFromSalesforce(sfdxHome){
    def logoutStatus = bat returnStatus: true, script: "\"${sfdxHome}/sfdx\" force:auth:logout -a -p --json > logout.json"

    if (logoutStatus!=0){
        jsonOut = readJSON file: 'logout.json'
        if (jsonOut.name != 'noOrgsFound'){
            error(jsonOut.message)
        } else {
            println("No orgs to be logout from")
        }
    }

	println "Successfully logout from Salesforce"
}

def validateFile (objPossibleToUp, importDir, org, objectType){
    dir(importDir) {
    def files = findFiles glob: '**/*.csv'
    def filesToUpload = [:]


        if (files.size()>0){
            if (objectType.toLowerCase().contains('all')){
                filesToUpload = validateFileAll(org, files, objPossibleToUp, filesToUpload)
            } else {
                filesToUpload = validateFileSingle(org, files, objPossibleToUp, filesToUpload, objectType)
            }
        } else {
            error ("There are no .csv files in the chosen directory")
        }

        if (filesToUpload.size()==1){
            println "Found a file to upload. File name:\n" + filesToUpload.toString() + "\nProceeding ..."
            return filesToUpload
        } else if (filesToUpload.size()>1){
            println "Found files to upload. List of files that were found:\n" + filesToUpload.toString() + "\nProceeding ..."
        } else {
            error ("There is no file with the specified Environment and/or Object Type names.\nList of the files in the target directory:\n" + filesToUpload.toString())
        }
    }
}

def validateFileAll (org, files, objPossibleToUp, filesToUpload){                
        for (f in files){
            def nameSplited = f.toString().split('_', 2).collect{it as String}
            for (obj in objPossibleToUp){
                if (nameSplited[0].toLowerCase().equals(org.toLowerCase()) && nameSplited[1].toLowerCase().contains(obj.toLowerCase())) {
                    if(filesToUpload.size()>0 && filesToUpload.containsKey(f)) {
                        error ("File: " + f + " is not valid as there are two object names in the name of the file")
                    } else {                    
                        filesToUpload.put(f,obj)
                    }
                } 
            }
        }
        return filesToUpload  
}

def validateFileSingle (org, files, objPossibleToUp, filesToUpload, objectType){
        for (f in files){
            def nameSplited = f.toString().split('_', 2).collect{it as String}
            for (obj in objPossibleToUp){
                if (nameSplited[0].toLowerCase().equals(org.toLowerCase()) && nameSplited[1].toLowerCase().contains(objectType.toLowerCase()) && nameSplited[1].toLowerCase().contains(obj.toLowerCase())){
                    if(filesToUpload.size()>0 && filesToUpload.containsKey(f)) {
                        error ("File: " + f + " is not valid as there are two object names in the name of the file")
                    } else {                    
                        filesToUpload.put(f,obj)
                    }
                }
            }
        }
        return filesToUpload
}


def updateFiles (sfdxHome, objectType, filesToUpload) {
    println ("Perapring to upload files.\nList of the files to upload: " + filesToUpload.toString())

    filesToUpload.each { entry ->    
        println ("Preparing to upload file: " + entry.key)

    	def updateStatus = bat (script: "\"${sfdxHome}/sfdx\" force:data:bulk:upsert -s ${entry.value} -f import/${entry.key} -i Id -w 1 --json > update.json", returnStatus: true)
        println updateStatus
        if (updateStatus==0){
        jsonUp = readJSON file: 'update.json' 
        
        def usJobId = jsonUp.result.jobId.toString().replace("]", "").replace("[", "")
        def usBatchId = jsonUp.result.id.toString().replace("]", "").replace("[", "")

        println usJobId
        println usBatchId
        
        def status = bat (returnStdout: true, script: "\"${sfdxHome}/sfdx\" force:data:bulk:status -i ${usJobId} -b ${usBatchId}")
        println status

        } else {
            error (jsonUp.message)
        }
    }
}