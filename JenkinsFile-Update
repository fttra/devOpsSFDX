@Library('Jenkinstools@master') _
@Field Boolean settingsLoaded

node {
    def sfdxHome = tool 'sfdx'
    def devHubName = "${params.Environment}"
    def objectType = "${params.Object}"


    //credential folder


    def branchToCheckout = "master"
    def repoUrl = "https://source.app.pconnect.biz/scm/esdp/esd-pmi-dx.git"
    def bitbucket_cred_mail = "Filip.Teter@contracted.pmi.com" 
    def bitbucket_cred_name = "fteter@PMINTL.NET"
    def bitbucket_cred_id = "ESDBitBucketTechnicalAccess"
    def connapp_consumerkey_id = "transla2ConnectedAppInfo"
    def cred_id = "serverKeyEsdDxSandbox"
    def username = 'filip.teter@my-pmi.com.transla2'
    def environmentList = ["Transla2", "MINT"] as String[]


withEnv(["HOME=${env.WORKSPACE}"]){

    stage ('Validate environment'){
        validateEnvironment(config, devHubName)
    }

    stage ('Validate file to upload'){
        checkoutSourceRepository(repoUrl, bitbucket_cred_id, branchToCheckout, bitbucket_cred_mail, bitbucket_cred_name, targetProjectDirName)
        validateFile()
    }

    stage('Authentication to Salesforce') {
        authenticateToSalesforce(sfdxHome, devHubName)
	}

	stage('Update file'){
        logoutFromSalesforce(sfdxHome)
        authenticateToSalesforce(sfdxHome, devHubName)
        //updateFiles(sfdxHome, config, devHubName, objectType)
    }
	 stage('Logout'){
	 	logoutFromSalesforce(sfdxHome)
	    }
}
}




def authenticateToSalesforce(sfdxHome, username, org){
    withCredentials([
        string(credentialsId: connapp_consumerkey_id, variable: 'CLIENT_ID'),
        file(credentialsId: cred_id,  variable: 'KEY_FILE'),
    ]) {
        
        def rc = sh returnStatus: true, script: "${sfdxHome}/sfdx force:auth:jwt:grant  -i ${CLIENT_ID} -u ${username} -f ${KEY_FILE}  --setdefaultusername"
        if (rc != 0) { error 'Authorization failed' }

        println rc
    } 
}

def validateEnvironment (environmentList, org){
    if(environmentList.contains(org) == null){
        error ("There is no environment with the name: " + org)
    }
    print "Validation successful. Proceeding ..."
}

def logoutFromSalesforce(sfdxHome){
    def logoutStatus = sh returnStatus: true, script: "${sfdxHome}/sfdx force:auth:logout -a -p --json > logout.json"

    if (logoutStatus!=0){
        jsonOut = readJSON file: 'logout.json'
        if (jsonOut.name != 'noOrgsFound'){
            error(jsonOut.message)
        } else {
            println("No orgs to be logout from")
        }
    }

	println "Successfully logout from Salesforce"
}

def validateFile(){
    if (!fileExists("data/TESTLS _users.csv")){
        error ("There is no file to update records or the file has a different name than the object You want to update")
    } else {
        println ("File was found. Proceeding ... ")
    }
}

def updateFiles (sfdxHome, org, objectType) {
    	def con = sh returnStdout: true, script: "${sfdxHome}/sfdx force:data:bulk:upsert -s ${objectType} -f data/${objectType}.csv -i Id -u ${config.credentials[org].username}"
		println con
}

def checkoutSourceRepository(repoUrl, bitbucket_cred_id, branchToCheckout, bitbucket_cred_mail, bitbucket_cred_name){
    checkout([
                    $class           : 'GitSCM',
                    branches         : [[name: "${branchToCheckout}"]],
                    extensions       : [[$class: 'UserIdentity', email: "${bitbucket_cred_mail}", name: "${bitbucket_cred_name}"],
                                        [$class: 'CleanBeforeCheckout'],
                    userRemoteConfigs: [[credentialsId: "${bitbucket_cred_id}", url: repoUrl]]
            ])
}
