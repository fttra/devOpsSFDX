node {
    def sfdxHome = tool 'sfdx'
    def devHubName = "${params.Environment}"
    def objectType = "${params.Object}"
    def importDir = 'data'
    def fileToUpload

    def repoUrl = "https://source.app.pconnect.biz/scm/esdp/esd-pmi-dx.git"
    def bitbucket_cred_id = "ESDBitBucketTechnicalAccess"
    def branchToCheckout = "master"
    def bitbucket_cred_mail = "Filip.Teter@contracted.pmi.com" 
    def bitbucket_cred_name = "fteter@PMINTL.NET"
    
    def connapp_consumerkey_id = 'transla2ConnectedAppInfo'
    def cred_id = 'serverKeyEsdDxSandbox'
    def username_transla2 = 'transla2ftUsername'
    def server_url = 'https://test.salesforce.com/'
    def environmentList = ["Transla2", "MINT"] as String[]
    

withEnv(["HOME=${env.WORKSPACE}"]){

    stage ('Validate environment'){
        validateEnvironment(environmentList, devHubName)
    }

    stage ('Validate file to upload'){
        checkoutSourceRepository(repoUrl, bitbucket_cred_id, branchToCheckout, bitbucket_cred_mail, bitbucket_cred_name)
        fileToUpload = validateFile(org, objectType, importDir)
    }

    stage('Authentication to Salesforce') {
        authenticateToSalesforce(sfdxHome, connapp_consumerkey_id, cred_id, username_transla2, server_url)
	}

	stage('Update file'){
        logoutFromSalesforce(sfdxHome)
        authenticateToSalesforce(sfdxHome, connapp_consumerkey_id, cred_id, username_transla2, server_url)
        updateFiles(sfdxHome, fileToUpload)
    }
	 stage('Logout'){
	 	logoutFromSalesforce(sfdxHome)
	    }
}
}

def validateEnvironment (environmentList, org){
    if(environmentList.contains(org) == null){
        error ("There is no environment with the name: " + org)
    } else {
    print "Validation successful. Proceeding ..."
    }
}

def checkoutSourceRepository(repoUrl, bitbucket_cred_id, branchToCheckout, bitbucket_cred_mail, bitbucket_cred_name){
   
try{
    checkout([
                    $class           : 'GitSCM',
                    branches         : [[name: "${branchToCheckout}"]],
                    extensions       : [[$class: 'UserIdentity', email: "${bitbucket_cred_mail}", name: "${bitbucket_cred_name}"],
                                        [$class: 'CleanBeforeCheckout']],
                    userRemoteConfigs: [[credentialsId: "${bitbucket_cred_id}", url: repoUrl]]
            ])
    print "Successfull checkout to repository. Proceeding ..."
} catch (e){
    print e
}
}

def String validateFile(org, objectType, importDir){
    dir(importDir) {
    def files = findFiles glob: '**/*.csv'
    def listOfFiles = []
    for (f in files){
        if (f.toString().contains(org) && f.toString().contains(objectType)){
            listOfFiles.add(f.toString())
        }
        }
    if (listOfFiles.size()==1){
       println "Found a file to upload. File name:\n" + listOfFiles.toString() + "\nProceeding ..."
       return listOfFiles[0]
    } else if (listOfFiles.size()>1){
         error ("There are too many files with the specified Envrionment and Object Type names.\nList of files that were found:\n" + listOfFiles.toString())
    } else {
        error ("There is no file with the specified Environment and Object Type names or there is no .csv file.")
    }
    }
}

def authenticateToSalesforce(sfdxHome, connapp_consumerkey_id, cred_id, username_transla2, server_url){
    withCredentials([
        string(credentialsId: connapp_consumerkey_id, variable: 'CLIENT_ID'),
        usernamePassword(credentialsId: username_transla2, usernameVariable: 'SF_USER', passwordVariable: 'SF_PASS'),
        file(credentialsId: cred_id,  variable: 'KEY_FILE')
    ]) {
        
        def rc = sh(returnStatus: true, script: "${sfdxHome}/sfdx force:auth:jwt:grant -i '${CLIENT_ID}' -u '${SF_USER}' -f '${KEY_FILE}' -r '${server_url}'")
        if (rc != 0) { error 'Authorization failed' }

        println rc
    } 
}

def logoutFromSalesforce(sfdxHome){
    def logoutStatus = sh returnStatus: true, script: "${sfdxHome}/sfdx force:auth:logout -a -p --json > logout.json"

    if (logoutStatus!=0){
        jsonOut = readJSON file: 'logout.json'
        if (jsonOut.name != 'noOrgsFound'){
            error(jsonOut.message)
        } else {
            println("No orgs to be logout from")
        }
    }

	println "Successfully logout from Salesforce"
}

def updateFiles (sfdxHome, objectType) {
    	def con = sh returnStdout: true, script: "${sfdxHome}/sfdx force:data:bulk:upsert -s ${objectType} -f data/Transla2_users.csv -i Id -u ${username}"
		println con
}