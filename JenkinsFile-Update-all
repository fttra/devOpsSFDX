@Library('Jenkinstools@master') _
node {
    def sfdxHome = tool 'sfdx'
    def devHubName = "${params.Environment}"
    def objectType = "${params.Object}"
    def filesToUpload

    def resource = libraryResource resource: 'updateData-config.yml'
    def config = readYaml text: resource

    def importDir = config.core_properties.bitbucket_parameters.bitbucket_import_dir
    def objPossibleToUp = config.core_properties.salesforce_parameters.objects_possible_to_upload.split(',').collect{it as String}
   

withEnv(["HOME=${env.WORKSPACE}"]){

    stage ('Validate environment'){
        validateEnvironment(config, devHubName)
    }

    stage ('Validate file to upload'){
        checkoutSourceRepository(config)
        filesToUpload = validateFile(objPossibleToUp, importDir, devHubName, objectType)
    }

    stage('Authentication to Salesforce') {
        authenticateToSalesforce(sfdxHome, config, org)
	}

	stage('Update file'){
        logoutFromSalesforce(sfdxHome)
        authenticateToSalesforce(sfdxHome, config, org)
        updateFiles(sfdxHome, objectType, filesToUpload, config, org)
    }
	 stage('Logout'){
	 	logoutFromSalesforce(sfdxHome)
	    }
}
}

def validateEnvironment (config, org){
    if(config.credentials[org] == null){
        error ("There is no environment with the name: " + org)
    } else {
    print "Validation of the environment successful. Proceeding ..."
    }
}

def checkoutSourceRepository(config){
   
try{
    checkout([
                    $class           : 'GitSCM',
                    branches         : [[name: "master"]],
                    extensions       : [[$class: 'UserIdentity', email: "${config.core_properties.bitbucket_parameters.bitbucket_cred_mail}", name: "${config.core_properties.bitbucket_parameters.bitbucket_cred_name}"],
                                        [$class: 'CleanBeforeCheckout']],
                    userRemoteConfigs: [[credentialsId: "${config.core_properties.bitbucket_parameters.bitbucket_cred_id}", url: "${config.core_properties.bitbucket_parameters.bitbucket_src_rep}"]]
            ])
    print "Successfull checkout to repository. Proceeding ..."
} catch (e){
    print e
}
}

def authenticateToSalesforce(sfdxHome, config, org){
    withCredentials([
        string(credentialsId: config.credentials[org].connapp_consumerkey_id, variable: 'CLIENT_ID'),
        usernamePassword(credentialsId: config.credentials[org].username, usernameVariable: 'SF_USER', passwordVariable: 'SF_PASS'),
        file(credentialsId: config.credentials[org].cred_id,  variable: 'KEY_FILE')
    ]) {
        
        def rc = sh(returnStatus: true, script: "${sfdxHome}/sfdx force:auth:jwt:grant -i '${CLIENT_ID}' -u '${SF_USER}' -f '${KEY_FILE}' -r '${config.credentials[org].server_url}'")
        if (rc != 0) { error 'Authorization failed' }
    } 
}

def logoutFromSalesforce(sfdxHome){
    def logoutStatus = sh (returnStatus: true, script: "${sfdxHome}/sfdx force:auth:logout -a -p --json > logout.json")

    if (logoutStatus!=0){
        jsonOut = readJSON file: 'logout.json'
        if (jsonOut.name != 'noOrgsFound'){
            error(jsonOut.message)
        } else {
            println("No orgs to be logout from")
        }
    }

	println "Successfully logout from Salesforce"
}

def validateFile (objPossibleToUp, importDir, org, objectType){
    dir(importDir) {
    def files = findFiles glob: '**/*.csv'
    def filesToUpload = [:]


        if (files.size()>0){
            if (objectType.toLowerCase().contains('all')){
                filesToUpload = validateFileAll(org, files, objPossibleToUp, filesToUpload)
            } else {
                filesToUpload = validateFileSingle(org, files, objPossibleToUp, filesToUpload, objectType)
            }
        } else {
            error ("There are no .csv files in the chosen directory")
        }

        if (filesToUpload.size()==1){
            println "Found a file to upload. File name:\n" + filesToUpload.keySet() + "\nProceeding ..."
            return filesToUpload
        } else if (filesToUpload.size()>1){
            println "Found files to upload. List of files that were found:\n" + filesToUpload.keySet() + "\nProceeding ..."
            return filesToUpload
        } else {
            error ("There is no file with the specified Environment and/or Object Type names.\nList of the files in the target directory:\n" + filesToUpload.toString())
        }
    }
}

def validateFileAll (org, files, objPossibleToUp, filesToUpload){                
        for (f in files){
            def nameSplited = f.toString().split('_', 2).collect{it as String}
            for (obj in objPossibleToUp){
                if (nameSplited[0].toLowerCase().equals(org.toLowerCase()) && nameSplited[1].toLowerCase().contains(obj.toLowerCase())) {
                    if(filesToUpload.size()>0 && filesToUpload.containsKey(f)) {
                        error ("File: " + f + " is not valid as there are two object names in the name of the file")
                    } else {                    
                        filesToUpload.put(f,obj)
                    }
                } 
            }
        }
        return filesToUpload  
}

def validateFileSingle (org, files, objPossibleToUp, filesToUpload, objectType){
        for (f in files){
            def nameSplited = f.toString().split('_', 2).collect{it as String}
            for (obj in objPossibleToUp){
                if (nameSplited[0].toLowerCase().equals(org.toLowerCase()) && nameSplited[1].toLowerCase().contains(objectType.toLowerCase()) && nameSplited[1].toLowerCase().contains(obj.toLowerCase())){
                    if(filesToUpload.size()>0 && filesToUpload.containsKey(f)) {
                        error ("File: " + f + " is not valid as there are two object names in the name of the file")
                    } else {                    
                        filesToUpload.put(f,obj)
                    }
                }
            }
        }
        return filesToUpload
}

def updateFiles (sfdxHome, objectType, filesToUpload, config, org){
    withCredentials([
        usernamePassword(credentialsId: config.credentials[org].username, usernameVariable: 'SF_USER', passwordVariable: 'SF_PASS'),
    ]) {
        println ("Perapring to upload files.\nList of the files to upload:\n" + filesToUpload.keySet() + "\nProceeding ...")

        filesToUpload.each { entry ->
            println ("Preparing to upload file: " + entry.key)
    	    def updateStatus = sh (script: "${sfdxHome}/sfdx force:data:bulk:upsert -s ${entry.value} -f data/${entry.key} -i Id -u '${SF_USER}' --json > update.json", returnStatus: true)        

            if (updateStatus==0){
                jsonUp = readJSON file: 'update.json' 
        
                def usJobId = jsonUp.result.jobId.toString().replace("]", "").replace("[", "")
                def usBatchId = jsonUp.result.id.toString().replace("]", "").replace("[", "")

                def status = sh (returnStdout: true, script: "${sfdxHome}/sfdx force:data:bulk:status -i ${usJobId} -b ${usBatchId} -u '${SF_USER}'")
                println status
            } else {
                error (jsonUp.message) 
            }
        }
    }
}